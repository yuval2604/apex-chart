{"version":3,"sources":["components/buttons.jsx","components/Notification.jsx","components/form.jsx","components/Donut.jsx","components/graph.jsx","components/Column.jsx","components/barChart.jsx","components/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["buttons","state","value","handleChange","event","setState","target","handleSubmit","props","onSubmit","this","name","type","onChange","className","onClick","Component","Notification","values","map","v","key","form","option","series","parameters","Category","CategoryInput","ParamsInput","handleSubmitCat","val","CategoryInputCopy","push","onChangeOption","handleSubmitPar","ParamsInputCopy","onChangeSeries","changeNum","Donut","options","width","Graph","vals","Column","console","log","BarChart","annotations","points","x","seriesIndex","label","borderColor","offsetY","style","color","background","text","chart","height","plotOptions","bar","columnWidth","endingShape","dataLabels","enabled","stroke","grid","row","colors","xaxis","labels","rotate","categories","yaxis","title","fill","gradient","shade","shadeIntensity","gradientToColors","undefined","inverseColors","opacityFrom","opacityTo","stops","data","id","React","Dashboard","App","onIncrement","state_copy","Object","assign","parseInt","inputText","num","state2","value2","pushDashboard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6cdddcf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass buttons extends Component {\n  state = {\n    value: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleSubmit = () => {\n    this.setState({ value: \"\" });\n    this.props.onSubmit(this.state.value);\n  };\n\n  render() {\n    return (\n      <div>\n        <label>\n          {this.props.name}:\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.value}\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          onClick={this.handleSubmit}\n        >\n          add\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default buttons;\n","import React, { Component } from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\n\nconst Notification = props => {\n  return (\n    <div className=\"section\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{props.name}:</span>\n          <ul className=\"online-users\">\n            {props.values &&\n              props.values.map(v => {\n                return <li key={v}>{v}</li>;\n              })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Buttons from \"../components/buttons\";\nimport Notification from \"../components/Notification\";\n\nclass form extends Component {\n  state = {\n    option: this.props.option,\n    series: this.props.series,\n    parameters: [],\n    Category: [],\n    CategoryInput: \"\",\n    ParamsInput: \"\"\n  };\n\n  handleSubmitCat = val => {\n    const CategoryInputCopy = [...this.state.Category];\n    CategoryInputCopy.push(val);\n    this.setState({ Category: CategoryInputCopy });\n    this.props.onChangeOption(val);\n  };\n  handleSubmitPar = val => {\n    const ParamsInputCopy = [...this.state.parameters];\n    ParamsInputCopy.push(val);\n    this.setState({ parameters: ParamsInputCopy });\n    this.props.onChangeSeries(val);\n  };\n  render() {\n    //console.log(\"form render\", this.state.option);\n    return (\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <Buttons onSubmit={this.handleSubmitCat} name=\"Category\" />\n            <Buttons onSubmit={this.handleSubmitPar} name=\"Parameter\" />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notification values={this.state.Category} name={\"Category\"} />\n            <Notification values={this.state.parameters} name={\"Parameters\"} />\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          onClick={() => this.props.changeNum()}\n        >\n          show charts\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default form;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass Donut extends Component {\n  state = {\n    option: this.props.option,\n    series: this.props.series\n  };\n  render() {\n    const option = this.props.option;\n    const series = this.props.series;\n    return (\n      <div className=\"donut\">\n        <Chart\n          options={this.state.option}\n          series={this.state.series}\n          type=\"donut\"\n          width=\"380\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Donut;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass Graph extends Component {\n  state = {};\n  render() {\n    const vals = this.props.value;\n    return (\n      <ReactApexChart\n        options={vals.options}\n        series={vals.series}\n        type=\"line\"\n        width=\"500\"\n      />\n    );\n  }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"react-apexcharts\";\n\nclass Column extends Component {\n  state = {\n    values: this.props.value\n  };\n\n  handleChange = () => {\n    console.log(\"handle change\");\n  };\n\n  render() {\n    //console.log(\"rendering column\", this.state.values);\n    return (\n      <ReactApexChart\n        options={this.state.values.options}\n        series={this.state.values.series}\n        onClick={() => console.log(\"click\")}\n        onChange={() => console.log(\"change\")}\n        type=\"bar\"\n        width=\"500\"\n      />\n    );\n  }\n}\n\nexport default Column;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        annotations: {\n          points: [\n            {\n              x: \"\",\n              seriesIndex: 0,\n              label: {\n                borderColor: \"#775DD0\",\n                offsetY: 0,\n                style: {\n                  color: \"#fff\",\n                  background: \"#775DD0\"\n                },\n                text: \"This is U \"\n              }\n            }\n          ]\n        },\n        chart: {\n          height: 350,\n          type: \"bar\"\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"50%\",\n            endingShape: \"rounded\"\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          width: 2\n        },\n\n        grid: {\n          row: {\n            colors: [\"#fff\", \"#f2f2f2\"]\n          }\n        },\n        xaxis: {\n          labels: {\n            rotate: -45\n          },\n          categories: this.props.categories\n        },\n        yaxis: {\n          title: {\n            text: \"Servings\"\n          }\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shade: \"light\",\n            type: \"horizontal\",\n            shadeIntensity: 0.25,\n            gradientToColors: undefined,\n            inverseColors: true,\n            opacityFrom: 0.85,\n            opacityTo: 0.85,\n            stops: [50, 0, 100]\n          }\n        }\n      },\n      series: [\n        {\n          name: \"Servings\",\n          data: this.props.data\n        }\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"chart\">\n        <ReactApexChart\n          options={this.state.options}\n          series={this.state.series}\n          type=\"bar\"\n          height=\"350\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport Donut from \"../components/Donut\";\nimport Graph from \"../components/graph\";\nimport Column from \"../components/Column\";\nimport BarChart from \"../components/barChart\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass Dashboard extends Component {\n  state = {\n    values: this.props.value\n  };\n  render() {\n    console.log(\"Dashboard\", this.state.values.options.xaxis.categories);\n    // console.log(this.state.values.option.xaxis);\n    // console.log(this.state.values.option.series);\n    return (\n      <div className=\"mixed-chart\">\n        <div>\n          <Column value={this.state.values} />\n        </div>\n        <div>\n          <Graph value={this.state.values} />\n        </div>\n        <div className=\"donut\">\n          {\n            <Donut\n              option={this.state.values.options}\n              series={this.state.values.series[0][\"data\"]}\n            />\n          }\n\n          <BarChart\n            categories={this.state.values.options.xaxis.categories}\n            data={this.state.values.series[0][\"data\"]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from \"react\";\n\nimport Form from \"../src/components/form\";\nimport Dashboard from \"../src/components/dashboard\";\nimport Column from \"../src/components/Column\";\nimport Donut from \"../src/components/Donut\";\nimport Graph from \"../src/components/graph\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state2 = {\n      options: {},\n      series: [44, 55, 41, 17, 15],\n      labels: [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    };\n\n    this.state = {\n      options: {\n        chart: {\n          id: \"basic-bar\"\n        },\n        xaxis: {\n          categories: []\n        }\n      },\n      series: [\n        {\n          name: \"series-1\",\n          data: []\n        }\n      ],\n      num: 0,\n      inputText: \"\"\n    };\n  }\n\n  onIncrement = () => {\n    const state_copy = Object.assign({}, this.state);\n    state_copy.series[\"0\"][\"data\"].push(parseInt(this.state.inputText));\n    this.setState({ inputText: \"\" });\n    this.setState({\n      series: state_copy.series\n    });\n    let val = this.state.num + 1;\n    this.setState({ num: val });\n  };\n\n  onChangeOption = val => {\n    console.log(\"onChangeOption \", val);\n    const state_copy = Object.assign({}, this.state.options);\n    state_copy.xaxis.categories.push(val);\n    this.setState({\n      options: state_copy\n    });\n  };\n  onChangeSeries = val => {\n    console.log(\"onChangeSeries \", val);\n    const state_copy = [...this.state.series];\n    state_copy[0][\"data\"].push(parseInt(val));\n    this.setState({\n      series: state_copy\n    });\n  };\n\n  changeNum = () => {\n    this.setState({\n      num: 1\n    });\n  };\n\n  pushDashboard() {\n    // console.log(this);\n    console.log(\"pushDashboard\", this.state.num);\n    if (this.state.num == 0) return \"\";\n    else {\n      console.log(\"dashboard rendered\");\n      return <Dashboard value={this.state} value2={this.state2} />;\n    }\n  }\n\n  render() {\n    console.log(\"render app.js\", this.state);\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <Form\n            option={this.state.options}\n            series={this.state.series}\n            onChangeOption={this.onChangeOption}\n            onChangeSeries={this.onChangeSeries}\n            changeNum={this.changeNum}\n          />\n          {this.pushDashboard()}\n\n          {/* <Column values={this.state} /> */}\n\n          {/* <ReactApexChart\n            options={this.state.options}\n            series={this.state.series}\n            type=\"line\"\n            width=\"500\"\n          /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}